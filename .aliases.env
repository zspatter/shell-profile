# Setting PATH for Python 3.7
# The original version is saved in .bash_profile.pysave
    export PS1="$(scutil --get ComputerName):\W \u\$ "
    export PATH=‘.:/bin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:Library/Frameworks/Python.framework/Versions/3.7/bin:${PATH}’
    export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7:${PYTHONPATH}"
    export HISTCONTROL=erasedups:ignorespace    # ignore duplicates and entires starting with space
    export CLICOLOR=1
    export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
    export GREP_OPTIONS='--color=auto'
    export GREP_COLOR='1;32;40'

    alias please='sudo'                         # Canadian sudo
    alias python='python3'                      # Avoid accidental clash with system Python version
    alias pip='pip3'                            # Avoid accidental clash with system pip version

#   -----------------------------
#   MAKE TERMINAL BETTER - Useful Aliases
#   -----------------------------
#
    alias bp='edit ~/.bash_profile'             # opens bash_profile in sublime
    alias source='source ~/.bash_profile'       # Updates bash_profile for current session
    alias cp='cp -iv'                           # Preferred 'cp' implementation
    alias mv='mv -iv'                           # Preferred 'mv' implementation
    alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation

    alias ls='ls -GF'                           # Minimally improved 'ls'
    alias ll='ls -FGlhp'                        # Preferred 'ls' implementation exluding hidden files
    alias ll_full='ls -FGlAhp'    		        # Preferred 'ls' implementation including hidden files
    alias l.='ls -GFl -d .*'                    # Display hidden files only
    alias wc='echo $(ls -l | wc -l)'            # Number of files in directory
    alias tree='tree -C'                        # Colors output of

    cd() { builtin cd "$@"; ll; }               # Always list directory contents upon 'cd'
    alias ~='cd ~'                              # Go home
    alias ..='cd ../'                           # Go back 1 directory level
    alias ...='cd ../../'                       # Go back 2 directory levels
    alias .3='cd ../../../'                     # Go back 3 directory levels
    alias .4='cd ../../../../'                  # Go back 4 directory levels
    alias .5='cd ../../../../../'               # Go back 5 directory levels
    alias .6='cd ../../../../../../'            # Go back 6 directory levels

    alias edit='subl -w'                        # Opens any file in sublime text editor
    alias less='less -FSRXNc'                   # Preferred 'less' implementation
    alias f='open -a Finder ./'                 # Opens current directory in MacOS Finder
    alias which='type -all'                     # Find executables

    alias c='clear'                             # Clear terminal display
    alias h='history'                           # Shortcut for history
    alias cw='history -cw'                      # Clear terminal buffer
    alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"  # Nice, compact tabular output about processes

    alias bc='bc -l -q'                         # Prefered 'bc' implementation
    alias mount='mount | column -t'             # Pretty prints mount
    alias j='jobs -l'                           # Prefered implementions of 'jobs'
    alias now='date +"%T"'                      # Print current time
    alias nowdate='date +"%F"'                  # Print current date (YYYY-mm-dd)
    eval $(thefuck --alias)                     # Magnificent app which corrects your previous console command.

    alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
    alias show_options='shopt'                  # Show_options: display bash options settings
    alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
    alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
    mkcd () { mkdir -p "$1" && cd "$1"; }       # mkcd:          Makes new Dir and jumps inside
    trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
    alias empty_trash='rm -rf ~/.Trash/*'       # empty_trash   Empties trash
    ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
    alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop


################################################################

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
    extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }

################################################################

    alias qfind="find . -name "                 # qfind:    Quickly search for file
    ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
    ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
    ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
